#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import subprocess
import functools


shell = functools.partial(subprocess.call, shell=True)


def django_environ(testing=False):

    def _uses_appconfig():
        from decimal import Decimal
        from django import get_version
        return Decimal(get_version()[:3]) >= Decimal('1.7')

    def decorator(func):
        settings_module = 'sampleproject.settings'
        if testing:
            settings_module += '_testing'

        def setup_environ():
            from decimal import Decimal
            from django import get_version

            sys.path.insert(0, 'sampleproject')
            os.environ['DJANGO_SETTINGS_MODULE'] = settings_module
            print('Using settings: {0}'.format(settings_module))

            if _uses_appconfig():
                from django import setup
                setup()

        def create_database():
            from django import get_version
            from django.contrib.auth.models import User
            from django.core.management import call_command

            if _uses_appconfig():
                call_command('migrate', interactive=False)
            else:
                call_command('syncdb', interactive=False)

            admin, created = User.objects.get_or_create(
                username='admin',
                is_staff=True,
                is_superuser=True
            )
            if created:
                admin.set_password('admin')
                admin.save()

            print('Superuser created. Login "admin" password "admin"')

        @functools.wraps(func)
        def wrapper(*args, **kw):
            cleanup()
            setup_environ()
            create_database()
            return func(*args, **kw)

        return wrapper

    return decorator


@django_environ(testing=True)
def test(argv):
    '''Run all tests'''
    import pytest

    options = " ".join(argv)
    sys.exit(pytest.main("--capture=no tests " + options))


@django_environ()
def serve(argv):
    '''Start django development server'''
    from django.core.management import execute_from_command_line
    execute_from_command_line(['manage.py', 'runserver'])


def cleanup():
    '''Removes temporary files'''
    shell('find . -name *.pyc -delete')
    shell('find . -name __pycache__ -delete')
    shell('find . -name db_test.sqlite -delete')


def help():
    '''Show help message and exit'''
    print('Available tasks: \n')
    for task in tasks:
        print(' - {0}: {1}'.format(task.__name__, task.__doc__), file=sys.stderr)
    print()


tasks = test, serve, cleanup, help


if __name__ == '__main__':
    try:
        globals()[sys.argv[1]](sys.argv[2:])
    except (IndexError, KeyError):
        help()
        sys.exit(1)
